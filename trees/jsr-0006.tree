\title{[[forester]] anatomy of \startverb\def\stopverb}
\date{2024-05-19}
\tag{blog}
\tag{done}
\author{jinser}

\def\lam[x]{
    \lambda\x\mathpunct{.}
}
\def\forester{
    [ocaml-forester](https://git.sr.ht/~jonsterling/ocaml-forester)
}
\def\SubSup[arg1][arg2]{#{_{\arg1}^{\arg2}}}

\def\codedef{
    \code{\startverb\def\stopverb}
}

\p{简单描述在 [[forester]] 中 \codedef 的使用方式。从语法开始。}

\transclude{fst-0005}

\p{从 grammar 看 \codedef 语法大致由三个部分组成：\code{ident}，\code{binder}，\code{arg}。考虑一个完整的 \codedef 实例：}

\transclude{fst-0004}

\p{分别来看组成部分：}

\ol{
    \li{\codedef 是关键词，表示一个宏定义的开始。}
    \li{\code{\startverb\lam\stopverb} 是 \code{ident}，表示正在 \codedef 的宏的名字。}
    \li{\code{[x]} 是 \code{binder}，即绑定参数名的位置，这里绑定的参数名是 \code{x}。}
    \li{\code{\startverb\lambda\x\mathpunct{.}\stopverb} 是 \code{arg}，parser 中写作 \code{arg} 也许是想表示其作为 \codedef 参数的意思，不过实际上可以看作正在定义的宏的 body。观察 body，可以发现 \code{binder} 中绑定的参数名在其中被用到：\code{\startverb\x\stopverb}。}
}

\p{这个通过 \codedef 定义出的名为 \code{\startverb\lam\stopverb} 的宏被设计为在 #{\LaTeX} 环境中使用，使用 \code{\startverb ## {  } \stopverb} 进入。}
\pre{\startverb
    ##{
        \begin{aligned}
            \lam{x} \\
            \lam{x y} \\
            \lam{x}\lam{y} \\
        \end{aligned}
    }
\stopverb}
\p{可以注意到参数是如何传递给 \code{\startverb\lam\stopverb} 宏的，在宏后面写一对花括号，花括号中的任意字符都是会传递给该宏的参数。这里三次传递的参数分别是 \code{x}，\code{x y} 以及 \code{x} 和 \code{y}。}

\pre{\startverb
    ##{
        \begin{aligned}
            \lambda\x\mathpunct{.} \\
            \lambda\x y\mathpunct{.} \\
            \lambda\x\mathpunct{.}\lambda\y\mathpunct{.} \\
        \end{aligned}
    }
\stopverb}
\p{观察展开后的样子，可以看到这些参数分别出现在了各自原先 \code{\startverb\x\stopverb} 的位置，这可以看作一种重写或替换。}

\p{渲染的效果就像下面这样：}
##{
    \begin{aligned}
        \lam{x} \\
        \lam{x y} \\
        \lam{x}\lam{y} \\
    \end{aligned}
}

\p{\codedef 的参数可以不止一个，在 \code{binder} 的位置写任意数量的参数都是允许的。}

\transclude{fst-0007}

\p{每个 \code{binder} 都需要用方括号括起来，每个绑定参数的名字都在方括号中；绑定了的参数名可以在 \code{arg} 中使用。}

\p{\code{\startverb\SubSup{x}{y}\stopverb} => \SubSup{x}{y}。}

\p{传参的时候也是写多个花括号，要传递的参数按顺序对应。}


\p{最后看一个更简单的例子：}

\transclude{fst-0006}

\p{在这个例子中，\code{binder} 被省略，这意味着这个宏不需要绑定参数。使用不需要参数的宏非常简单直接，只需要不写花括号提供参数。}

\pre{\startverb
    \forester is a experimental forest markup language.
\stopverb}

\p{会被展开成：}
\pre{\startverb
    [ocaml-forester](https://git.sr.ht/~jonsterling/ocaml-forester) is a experimental forest markup language.
\stopverb}

\p{
    \forester is a experimental forest markup language.
}
